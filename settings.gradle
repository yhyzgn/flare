import org.gradle.api.initialization.resolve.RepositoriesMode

pluginManagement {
    println "aliyun pluginManagement"

    // Use aliyun maven repository (replace 'https://plugins.gradle.org/m2')
    System.setProperty('org.gradle.internal.plugins.portal.url.override', 'https://maven.aliyun.com/repository/gradle-plugin')

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    println "aliyun dependencyResolutionManagement"
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/" }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/apache-snapshots/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        mavenLocal()
        mavenCentral()
        google()
    }
}

rootProject.name = 'flare'

include ':flare'
include ':flare-spring'
include ':flare-spring-starter-abstract'
include ':flare-spring-boot-starter'
include ':flare-mock-server'
include ':flare-spring-boot-sample'
